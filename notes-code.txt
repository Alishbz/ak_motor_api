/****************************************************************************************
* ALI SAHBAZ
*
*
* AK motors driver API 
*
* Date          : 26.02.2024
* By            : Ali Sahbaz
* e-mail        : ali_sahbaz@outlook.com
*/
#pragma once



/*****
**AK60 Notes:**

- if you wanna change mode, you must stop motor, and reset power, and after switch the mode
- there are 4 mode : "guide mode", "servo mode" and "MIT power mode", "fw update mode"
- there are 2 main working motor mode : "servo mode" and "MIT power mode",

    Servo Mode: (***)

    - Servo mode is a control mode used for speed and position control of motors.
    - In this mode, the speed and position of the motor are continuously monitored and controlled using feedback signals.
    - Feedback signals are typically provided by encoders or other position sensors.
    - Servo motors are commonly used in applications requiring high precision, speed, and position control.

    ---

    MIT (Motor Integrated Tuning) Mode:  (**)

    - MIT mode is an automatic tuning or auto-tuning mode found in motor drives.
    - In this mode, the motor drive automatically analyzes the dynamic behavior between the motor and the load and adjusts control parameters (such as PID controller parameters) automatically.
    - This is used to achieve optimal performance of the motor and ensure system stability.
    - MIT mode can optimize the motor's performance more quickly and accurately compared to manual adjustments.
- if you wanna do fw update, after this you shoul make motor calibration !
**/

#include <cstdint>


const unsigned short crc16_tab[] = { 0x0000, 0x1021, 0x2042, 0x3063, 0x4084,
     0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad,
     0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7,
     0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,
     0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a,
     0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672,
     0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719,
     0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7,
     0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948,
     0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50,
     0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b,
     0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,
     0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97,
     0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe,
     0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca,
     0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3,
     0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d,
     0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214,
     0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c,
     0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
     0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3,
     0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d,
     0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806,
     0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e,
     0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1,
     0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
     0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
     0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
     0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };


class t_motor {

public:

}


class ak_motor {

public:

    ak_motor() {}
    ~ak_motor() {}

//private:


    typedef enum {
        CAN_PACKET_SET_DUTY = 0, // Duty Cycle Mode
        CAN_PACKET_SET_CURRENT, // Current Loop Mode
        CAN_PACKET_SET_CURRENT_BRAKE, // Current Brake Mode
        CAN_PACKET_SET_RPM, // Speed Mode
        CAN_PACKET_SET_POS, // Position Mode
        CAN_PACKET_SET_ORIGIN_HERE, // Set Origin Mode
        CAN_PACKET_SET_POS_SPD, // Position-Speed Loop Mode
    } CAN_PACKET_ID;



    void comm_can_transmit_eid(uint32_t id, const uint8_t* data, uint8_t len) {
        // todo
    }

    void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t* index) {
        buffer[(*index)++] = number >> 24;
        buffer[(*index)++] = number >> 16;
        buffer[(*index)++] = number >> 8;
        buffer[(*index)++] = number;
    }

    void buffer_append_int16(uint8_t* buffer, int16_t number, int16_t* index) {
        buffer[(*index)++] = number >> 8;
        buffer[(*index)++] = number;
    }


    void comm_can_set_duty(uint8_t controller_id, float duty) {
        int32_t send_index = 0;
        uint8_t buffer[4];
        buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
        comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
    }






    void comm_can_set_current(uint8_t controller_id, float current) {
        int32_t send_index = 0;
        uint8_t buffer[4];
        buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
        comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
    }


    void comm_can_set_cb(uint8_t controller_id, float current) {
        int32_t send_index = 0;
        uint8_t buffer[4];
        buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
        comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
    }

    void comm_can_set_rpm(uint8_t controller_id, float rpm) {
        int32_t send_index = 0;
        uint8_t buffer[4];
        buffer_append_int32(buffer, (int32_t)rpm, &send_index);
        comm_can_transmit_eid(controller_id |  ((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
    }

    void comm_can_set_pos(uint8_t controller_id, float pos) {
        int32_t send_index = 0;
        uint8_t buffer[4];
        buffer_append_int32(buffer, (int32_t)(pos * 10000.0), &send_index);
        comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS << 8), buffer, send_index);
    }

    void comm_can_set_origin(uint8_t controller_id, uint8_t set_origin_mode) {
        int32_t send_index = 0;
        uint8_t buffer;
        buffer = set_origin_mode;
        comm_can_transmit_eid(controller_id |  ((uint32_t)CAN_PACKET_SET_ORIGIN_HERE << 8), &buffer, send_index);
    }


    void comm_can_set_pos_spd(uint8_t controller_id, float pos, int16_t spd, int16_t RPA) {
        int32_t send_index = 0;
        int16_t send_index1 = 4;
        uint8_t buffer[8];
        buffer_append_int32(buffer, (int32_t)(pos * 10000.0), &send_index);
        buffer_append_int16(buffer, spd / 10.0, &send_index1);
        buffer_append_int16(buffer, RPA / 10.0, &send_index1);
        comm_can_transmit_eid(controller_id | ((uint32_t)CAN_PACKET_SET_POS_SPD << 8), buffer, send_index1);
    }



    /**
    void motor_receive(float* motor_pos, float*
        motor_spd, float* cur, int8_t* temp, int8_t* error, rx_message)
    {
        int16_t pos_int = (rx_message)->Data[0] << 8 | (rx_message)->Data[1]);
        int16_t spd_int = (rx_message)->Data[2] << 8 | (rx_message)->Data[3]);
        int16_t cur_int = (rx_message)->Data[4] << 8 | (rx_message)->Data[5]);
        &motor_pos = (float)(pos_int * 0.1f); // Motor Position
        &motor_spd = (float)(spd_int * 10.0f);// Motor Speed
        &motor_cur = (float)(cur_int * 0.01f);// Motor Current
        &motor_temp = (rx_message)->Data[6];// Motor Temperature
        &motor_error = (rx_message)->Data[7];// Motor Error Code
    }
    **/



    typedef enum {
        COMM_FW_VERSION = 0,
        COMM_JUMP_TO_BOOTLOADER,
        COMM_ERASE_NEW_APP,
        COMM_WRITE_NEW_APP_DATA,
        COMM_GET_VALUES, // Get motor operating parameters
        COMM_SET_DUTY, // Motor operates in duty cycle mode
        COMM_SET_CURRENT, // Motor operates in current loop mode
        COMM_SET_CURRENT_BRAKE, // Motor operates in current brake mode
        COMM_SET_RPM, // Motor operates in speed loop mode
        COMM_SET_POS, // Motor operates in position loop mode
        COMM_SET_HANDBRAKE, // Motor operates in handbrake current loop mode
        COMM_SET_DETECT, // Motor real-time feedback current position command
        COMM_ROTOR_POSITION = 22,// Motor feedback current position
        COMM_GET_VALUES_SETUP = 50,// Motor single or multiple parameter acquisition command
        COMM_SET_POS_SPD = 91, // Motor operates in position-speed loop mode
        COMM_SET_POS_MULTI = 92, // Set motor motion to single-turn mode
        COMM_SET_POS_SINGLE = 93, // Set motor motion to multi-turn mode, range ±100 turns
        COMM_SET_POS_UNLIMITED = 94, // Reserved
        COMM_SET_POS_ORIGIN = 95, // Set motor origin
    } COMM_PACKET_ID;

    unsigned short crc16(unsigned char* buf, unsigned int len) {
        unsigned int i;
        unsigned short cksum = 0;
        for (i = 0; i < len; i++) {
            cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
        }
        return cksum;
    }
   


    //Arrange int16 data
    void buffer_append_int16(uint8_t* buffer, int16_t number, int32_t* index) {
        buffer[(*index)++] = number >> 8;
        buffer[(*index)++] = number;
    }
    //Arrange uint16 data
    void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t* index) {
        buffer[(*index)++] = number >> 8;
        buffer[(*index)++] = number;
    }
    //Arrange int32 data
    /*void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t* index) {
        buffer[(*index)++] = number >> 24;
        buffer[(*index)++] = number >> 16;
        buffer[(*index)++] = number >> 8;
        buffer[(*index)++] = number;
    }*/
    //Arrange uint32 data
    void buffer_append_uint32(uint8_t* buffer, uint32_t number, int32_t* index) {
        buffer[(*index)++] = number >> 24;
        buffer[(*index)++] = number >> 16;
        buffer[(*index)++] = number >> 8;
        buffer[(*index)++] = number;
    }



    //Arrange int64 data
    void buffer_append_int64(uint8_t* buffer, int64_t number, int32_t* index) {
        buffer[(*index)++] = number >> 56;
        buffer[(*index)++] = number >> 48;
        buffer[(*index)++] = number >> 40;
        buffer[(*index)++] = number >> 32;
        buffer[(*index)++] = number >> 24; 
        buffer[(*index)++] = number >> 16;
        buffer[(*index)++] = number >> 8;
        buffer[(*index)++] = number;
    }



    //Arrange uint64 data
    void buffer_append_uint64(uint8_t* buffer, uint64_t number, int32_t* index) {
        buffer[(*index)++] = number >> 56;
        buffer[(*index)++] = number >> 48;
        buffer[(*index)++] = number >> 40;
        buffer[(*index)++] = number >> 32;
        buffer[(*index)++] = number >> 24;
        buffer[(*index)++] = number >> 16;
        buffer[(*index)++] = number >> 8;
        buffer[(*index)++] = number;
    }
   



    //Organize and send data packet
   /* void packet_send_packet(unsigned char* data, unsigned int len, int handler_num) {
        int b_ind = 0;
        unsigned short crc;
        if (len > PACKET_MAX_PL_LEN) {
            return;
        }
        if (len <= 256) {
            handler_states[handler_num].tx_buffer[b_ind++] = 2;
            handler_states[handler_num].tx_buffer[b_ind++] = len;
        }
        else {
            handler_states[handler_num].tx_buffer[b_ind++] = 3;
            handler_states[handler_num].tx_buffer[b_ind++] = len >> 8;
            handler_states[handler_num].tx_buffer[b_ind++] = len & 0xFF;
        } 
            memcpy(handler_states[handler_num].tx_buffer + b_ind, data, len);
        b_ind += len;
        crc = crc16(data, len);
        handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
        handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
        handler_states[handler_num].tx_buffer[b_ind++] = 3;
        if (handler_states[handler_num].send_func) {
            handler_states[handler_num].send_func(handler_states[handler_num].tx_buffer,
                b_ind);
        }
    }*/







    int float_to_uint(float x, float x_min, float x_max, unsigned int bits) {
        /// Converts a float to an unsigned int, given range and number of bits ///
        float span = x_max - x_min;
        if (x < x_min) x = x_min;
        else if (x > x_max) x = x_max;
        return (int)((x - x_min) * ((float)((1 << bits) / span)));
    }
    float uint_to_float(int x_int, float x_min, float x_max, int bits) {
        /// converts unsigned int to float, given range and number of bits ///
        float span = x_max - x_min;
        float offset = x_min;
        return ((float)x_int) * span / ((float)((1 << bits) - 1)) + offset;
    }

    /** example:**/
    void pack_cmd(int addr /*CANMessage* msg*/ , float p_des, float v_des, float kp, float kd, float t_ff) {
        /// limit data to be within bounds ///
        float P_MIN = -12.5f;
        float P_MAX = 12.5f;
        float V_MIN = -30.0f;
        float V_MAX = 30.0f;
        float T_MIN = -18.0f;
        float T_MAX = 18.0f;
        float Kp_MIN = 0;
        float Kp_MAX = 500.0f;
        float Kd_MIN = 0;
        float Kd_MAX = 5.0f;
        float Test_Pos = 0.0f;
        p_des = fminf(fmaxf(P_MIN, p_des), P_MAX);
        v_des = fminf(fmaxf(V_MIN, v_des), V_MAX);
        kp = fminf(fmaxf(Kp_MIN, kp), Kp_MAX);
        kd = fminf(fmaxf(Kd_MIN, kd), Kd_MAX);
        t_ff = fminf(fmaxf(T_MIN, t_ff), T_MAX);
        /// convert floats to unsigned ints ///
        int p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
        int v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
        int kp_int = float_to_uint(kp, Kp_MIN, Kp_MAX, 12);
        int kd_int = float_to_uint(kd, Kd_MIN, Kd_MAX, 12);
        int t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
        /// pack ints into the can buffer ///
        uint8_t msg[8];
        msg[0] = p_int >> 8; // Position High 8
        msg[1] = p_int & 0xFF; // Position Low 8
        msg[2] = v_int >> 4; // Speed High 8 bits
        msg[3] = ((v_int & 0xF) << 4) | (kp_int >> 8); // Speed Low 4 bits KP High 4 bits
        msg[4] = kp_int & 0xFF; // KP Low 8 bits
        msg[5] = kd_int >> 4; // Kd High 8 bits
        msg[6] = ((kd_int & 0xF) << 4) | (t_int >> 8); // KP Low 4 bits Torque High 4 bits
        msg[7] = t_int & 0xff; // Torque Low 8 bits

        comm_can_transmit_eid(addr , msg, 8);  // test
    }
 

   //receiving Example Code
       /* void unpack_reply(CANMessage msg) {
        /// unpack ints from can buffer ///
        int id = msg.data[0]; //Driver ID
        int p_int = (msg.data[1] << 8) | msg.data[2]; // Motor Position Data
        int v_int = (msg.data[3] << 4) | (msg.data[4] >> 4); // Motor Speed Data
        int i_int = ((msg.data[4] & 0xF) << 8) | msg.data[5]; //Motor Torque Data
        Int T_int = msg.data[6];
        /// convert ints to floats ///
        float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
        float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
        float i = uint_to_float(i_int, -I_MAX, I_MAX, 12);
        float T = T_int;
        if (id == 1) {
            postion = p; // Read corresponding data based on ID
            speed = v;
            torque = i;
            Temperature = T - 40; // Temperature range: -40~215
        }
    }*/
};


